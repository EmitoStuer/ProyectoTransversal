/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectotransversal.Vistas;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import proyectotransversal.AccesoDatos.AlumnoData;
import proyectotransversal.AccesoDatos.InscripcionData;
import proyectotransversal.AccesoDatos.MateriaData;
import proyectotransversal.Entidades.Alumno;
import proyectotransversal.Entidades.Inscripcion;
import proyectotransversal.Entidades.Materia;

/**
 *
 * @author alumno
 */
public class FormularioInscripcion extends javax.swing.JInternalFrame {
    
    private DefaultTableModel modelo = new DefaultTableModel(){
    
        public boolean isCellEditable(int f, int c){
            return false;
        }    
    };
    
    private AlumnoData ad;
    private MateriaData md;
    private InscripcionData id;
    private Inscripcion i;
    private Alumno a;
    private Materia m;

    /**
     * Creates new form FormularioInscripcion
     */
    public FormularioInscripcion() {
        initComponents();
        cargarcombo();
        armarCabecera();
        this.setLocation(100, 30);
        jrbMateriasInscriptas.setSelected(true);
        borrarFilas();
        cargarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jcbAlumnos = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jrbMateriasInscriptas = new javax.swing.JRadioButton();
        jrbMateriasNoInscriptas = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtMaterias = new javax.swing.JTable();
        jbInscribir = new javax.swing.JButton();
        jbAnularInscripcion = new javax.swing.JButton();
        jbSalir = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 153, 102));
        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("Formulario de Inscripción");
        setPreferredSize(new java.awt.Dimension(600, 500));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Formulario de Inscripción");

        jSeparator1.setForeground(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("Seleccione un alumno:");

        jcbAlumnos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbAlumnosActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel3.setText("Listado de Materias");

        jrbMateriasInscriptas.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jrbMateriasInscriptas.setText("Materias Inscriptas");
        jrbMateriasInscriptas.setBorder(null);
        jrbMateriasInscriptas.setBorderPainted(true);
        jrbMateriasInscriptas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbMateriasInscriptasActionPerformed(evt);
            }
        });

        jrbMateriasNoInscriptas.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jrbMateriasNoInscriptas.setText("Materias no Inscriptas");
        jrbMateriasNoInscriptas.setBorder(null);
        jrbMateriasNoInscriptas.setBorderPainted(true);
        jrbMateriasNoInscriptas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbMateriasNoInscriptasActionPerformed(evt);
            }
        });

        jtMaterias.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jtMaterias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jtMaterias);

        jbInscribir.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jbInscribir.setText("Inscribir");
        jbInscribir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbInscribirActionPerformed(evt);
            }
        });

        jbAnularInscripcion.setText("Anular Inscripcion");
        jbAnularInscripcion.setToolTipText("");
        jbAnularInscripcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAnularInscripcionActionPerformed(evt);
            }
        });

        jbSalir.setText("Salir");
        jbSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbInscribir)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbAnularInscripcion)
                .addGap(139, 139, 139)
                .addComponent(jbSalir)
                .addGap(24, 24, 24))
            .addGroup(layout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addComponent(jrbMateriasInscriptas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 145, Short.MAX_VALUE)
                .addComponent(jrbMateriasNoInscriptas)
                .addGap(81, 81, 81))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jcbAlumnos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(181, 181, 181)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(162, 162, 162)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jcbAlumnos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jrbMateriasInscriptas)
                    .addComponent(jrbMateriasNoInscriptas))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbInscribir)
                    .addComponent(jbAnularInscripcion)
                    .addComponent(jbSalir))
                .addContainerGap(77, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Metodo para la selecion y extraccion de la informacion Materias Incriptas de la base de datos.
    //Permite la actualizacion de informacion en base a la seleccion de radioButton.
    private void jrbMateriasInscriptasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbMateriasInscriptasActionPerformed
        borrarFilas();
        if(jrbMateriasInscriptas.isSelected()){
            jrbMateriasNoInscriptas.setSelected(false);
            jbInscribir.setEnabled(false);
            jbAnularInscripcion.setEnabled(true);

            List<Materia> listaMaterias = new ArrayList();
            id =  new InscripcionData();
            a = (Alumno)jcbAlumnos.getSelectedItem();
            listaMaterias = id.obtenerMateriasCursada(a.getIdAlumno());

            if(listaMaterias.isEmpty()){
                JOptionPane.showMessageDialog(null,"Actualmente NO esta inscripto a ninguna Materia");
            }else{
                for (Materia materia : listaMaterias){
                    modelo.addRow(new Object[]{
                           materia.getIdMateria(),
                           materia.getNombre(),
                           materia.getAño()
                        });
                }
                }
        }
    }//GEN-LAST:event_jrbMateriasInscriptasActionPerformed

    //Metodo para la selecion y extraccion de la informacion Materias NO Incriptas de la base de datos.

    private void jrbMateriasNoInscriptasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbMateriasNoInscriptasActionPerformed
        borrarFilas();
        if (jrbMateriasNoInscriptas.isSelected()){
            jrbMateriasInscriptas.setSelected(false);
            jbAnularInscripcion.setEnabled(false);
            jbInscribir.setEnabled(true);

            List<Materia> listaMaterias = new ArrayList();
            id =  new InscripcionData();
            a = (Alumno)jcbAlumnos.getSelectedItem();
            listaMaterias = id.obtenerMateriasNoCursadas(a.getIdAlumno());

            if(listaMaterias.isEmpty()){
                JOptionPane.showMessageDialog(null,"Actualmente está inscripto en todas las materias");
            }else{
                for (Materia materia :listaMaterias){
                    modelo.addRow(new Object[]{
                           materia.getIdMateria(),
                           materia.getNombre(),
                           materia.getAño()
                        });
                }
            }
        }
    }//GEN-LAST:event_jrbMateriasNoInscriptasActionPerformed

    //ComboBox, permite la carga de informacion en base a las selecciones de los radios buttons.
    private void jcbAlumnosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbAlumnosActionPerformed
        jrbMateriasInscriptas.setSelected(true);
        jrbMateriasNoInscriptas.setSelected(false);
        jbInscribir.setEnabled(false);
        jbAnularInscripcion.setEnabled(true);        
        if (modelo.getRowCount()>=0){
            borrarFilas();
        }
        cargarTabla();
    }//GEN-LAST:event_jcbAlumnosActionPerformed

    
    //Boton salir, invoca el metodo 'dispose' para cerrar la ventana actual.
    private void jbSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_jbSalirActionPerformed

    //Boton Inscribir, invoca el metodo 'guardarInscripcion', inserta informacion en la base de datos.
    private void jbInscribirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbInscribirActionPerformed
        int filas = jtMaterias.getSelectedRow();
            if (filas!=-1){
                i = new Inscripcion();
                md = new MateriaData();
                id =  new InscripcionData();
                int idMateria = Integer.parseInt(String.valueOf(jtMaterias.getValueAt(filas, 0)));
                m = md.buscarMateria(idMateria);
                a = (Alumno)jcbAlumnos.getSelectedItem();
                i.setMateria(m);
                i.setAlumno(a);
                id.guardarInscripcion(i);
                borrarFilas();
                cargarTabla();
                jrbMateriasInscriptas.setSelected(true);
                jrbMateriasNoInscriptas.setSelected(false);
                jbInscribir.setEnabled(false);
                jbAnularInscripcion.setEnabled(true);
            }else{
                JOptionPane.showMessageDialog(this, "Debe seleccionar una Fila");
            }
    }//GEN-LAST:event_jbInscribirActionPerformed

    //Boton anular Inscripcion, invoca el metodo 'borrarInscripcion', eliminar informacion de la base de datos.
    private void jbAnularInscripcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAnularInscripcionActionPerformed
        int filas = jtMaterias.getSelectedRow();
                md = new MateriaData();
                id =  new InscripcionData();
            if (filas!=-1){
                int idMateria = Integer.parseInt(String.valueOf(jtMaterias.getValueAt(filas, 0)));
                a = (Alumno)jcbAlumnos.getSelectedItem();
                id.borrarInscripcion(a.getIdAlumno(),idMateria);
                borrarFilas();
                //jrbMateriasInscriptas.setSelected(false);
                cargarTabla();
            }else{
                JOptionPane.showMessageDialog(this, "Debe seleccionar una Fila");
            }
    }//GEN-LAST:event_jbAnularInscripcionActionPerformed

    private void cargarcombo(){
        List<Alumno> listaAlumnos = new ArrayList();
        ad = new AlumnoData();
        listaAlumnos = ad.listarAlumnos();
        for(Alumno alumno : listaAlumnos){
            jcbAlumnos.addItem(alumno);
        }
    }
    
    private void armarCabecera(){
            modelo.addColumn("Codigo");
            modelo.addColumn("Nombre");
            modelo.addColumn("Año");
            jtMaterias.setModel(modelo);
    }
    
    private void borrarFilas(){
        int f = (jtMaterias.getRowCount()-1);
        for(;f>=0;f--){
            //JOptionPane.showMessageDialog(this, jtProductos.getRowCount());
            modelo.removeRow(f);
        }
    }
    
    private void cargarTabla(){
        List<Materia> listaMaterias = new ArrayList();
        md = new MateriaData();
        id =  new InscripcionData();
        a = (Alumno)jcbAlumnos.getSelectedItem();
        listaMaterias = id.obtenerMateriasCursada(a.getIdAlumno());   
        for (Materia materia:listaMaterias){
            modelo.addRow(new Object[]{
            materia.getIdMateria(),
            materia.getNombre(),
            materia.getAño()
            });
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton jbAnularInscripcion;
    private javax.swing.JButton jbInscribir;
    private javax.swing.JButton jbSalir;
    private javax.swing.JComboBox<Alumno> jcbAlumnos;
    private javax.swing.JRadioButton jrbMateriasInscriptas;
    private javax.swing.JRadioButton jrbMateriasNoInscriptas;
    private javax.swing.JTable jtMaterias;
    // End of variables declaration//GEN-END:variables
}
